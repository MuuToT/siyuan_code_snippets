[
  {
    "id": "20250416151107-0000001",
    "name": "blocking-arsi_behavior-color",
    "type": "css",
    "enabled": true,
    "content": ".content.svelte-1np61ga.svelte-1np61ga {\n\n    background-color: #1F1F1F;\n\n}\n"
  },
  {
    "id": "20250416151107-0000002",
    "name": "blocking-arsi_behavior-content_block",
    "type": "css",
    "enabled": true,
    "content": ".protyle-wysiwyg[data-readonly=false] [data-node-id].asri-selected-block:not(#plugin-focus-unique-id,[data-plugin-focus=true])::before {\n\n    content: none; /* 屏蔽Asri每行前面的光标 */\n\n}\n"
  },
  {
    "id": "20250416151107-0000003",
    "name": "blocking-arsi_behavior-file_tree",
    "type": "css",
    "enabled": true,
    "content": "body:not(.body-asri--mobile,.body-asri--android,.body-asri--iosApp) .file-tree:where(.sy__file,.sy__outline,.sy__bookmark,.sy__tag,.sy__backlink) .block__icons::before {\n\n    content: none;\n\n}\n\n\n\nbody:not(.body-asri--mobile,.body-asri--android,.body-asri--iosApp) .file-tree:where(.sy__file,.sy__outline,.sy__bookmark,.sy__tag,.sy__backlink) .block__icons > :where(div,span) {\n\n    transform: none;\n\n    transition: auto;\n\n    opacity: 1 !important;\n\n}\n\n\n\nbody:not(.body-asri--mobile,.body-asri--android,.body-asri--iosApp) .file-tree:where(.sy__file,.sy__outline,.sy__bookmark,.sy__tag,.sy__backlink) .block__icons:hover, body:not(.body-asri--mobile,.body-asri--android,.body-asri--iosApp) .file-tree:where(.sy__file,.sy__outline,.sy__bookmark,.sy__tag,.sy__backlink) .block__icons:focus-within, .block__icons {\n\n    height: 30px !important;\n\n}\n"
  },
  {
    "id": "20250416151107-0000004",
    "name": "blocking-arsi_behavior-tab_bar",
    "type": "css",
    "enabled": true,
    "content": "/* 屏蔽 Asri 骚操作*/\n\n.layout-tab-bar .item:not(.item--pin,.item--focus) .item__icon, .layout-tab-bar .item:not(.item--pin,.item--focus) .item__icon + .item__text {\n\n    transform: none;\n\n}\n\n\n\n.layout-tab-bar .item:not(.item--pin,.item--focus) .item__text {\n\n    transform: none;\n\n}\n"
  },
  {
    "id": "20250416151107-0000005",
    "name": "main-background",
    "type": "css",
    "enabled": true,
    "content": "body {\n\n    background-image: url('public/background/frosted_win.jpg') !important;\n\n    background-position: center;\n\n    background-repeat: no-repeat;\n\n    background-size: cover;\n\n}\n\n\n\n/* 透明化工作区 */\n\n.layout-tab-container, /* 编辑区 */\n\n.protyle, /* 大纲, 文档树 */\n\n.protyle-breadcrumb, /* 面包屑 */\n\n.fn__flex-column[data-type=wnd] > .fn__flex:first-child /* 标签页栏 */\n\n{\n\n    background-color: #00000000 !important;\n\n}\n"
  },
  {
    "id": "20250416151107-0000006",
    "name": "main-doc_title",
    "type": "css",
    "enabled": true,
    "content": ".protyle-background__ia {\n\n    margin-left: 20px !important;\n\n}\n\n\n\n/* 文档内容标题 抬头 */\n\n.protyle-top > .protyle-title.protyle-wysiwyg--attr {\n\n    position: absolute;\n\n    top: 0;\n\n    left: 20%;\n\n    width: 76%;\n\n    font-size: 14px !important;\n\n}\n\n\n\n.protyle-title__input {\n\n    margin-top: 0; /* 抵消主题的css配置 (Asri) */\n\n}\n\n\n\n.protyle-title {\n\n    margin: 5px 0 0 10px !important;\n\n    width: 100%;\n\n    font-size: 1.3em;\n\n    top: 8px;\n\n    height: 100px;\n\n    left: 3%;\n\n    display: inline-block;\n\n    position: relative;\n\n    color: red;\n\n}\n\n\n\n/* 问得标题图标 */\n\n.protyle-background__icon img, .protyle-background__icon svg {\n\n    height: auto;\n\n    width: auto;\n\n    float: none;\n\n    border-radius: unset;\n\n}\n\n\n\n.protyle-top {\n\n    padding-bottom: 15px;\n\n    position: relative;\n\n    border-bottom: 2px solid;\n\n    border-color: transparent; /* 边框颜色设置为透明 */\n\n    border-image: linear-gradient(to right, #d2a5e9, #e11919, #19ff00) 1;\n\n    border-radius: 0;\n\n    min-height: 96px; /* 占位图标高度 */\n\n    max-width: 80%;\n\n    left: 10%;\n\n    display: flex;\n\n}\n\n\n\n.protyle-top .protyle-background__action {\n\n    display: inline-grid;\n\n    left: -1%;\n\n    width: 17%;\n\n}\n\n\n\n.protyle-top .protyle-background__img img {\n\n    max-height: 100px;\n\n}\n\n\n\n.protyle-too .protyle-background.protyle-background--enable {\n\n    width: 100%;\n\n}\n\n\n\n/* 按钮位置 */\n\nbody:not(.body-asri--mobile) .protyle-background:not(.without-icon) .protyle-background__img.fn__none + .protyle-background__ia .protyle-background__action {\n\n    top: 18px;\n\n    left: 128px;\n\n    --y: 0;\n\n    --x: 0;\n\n    display: block;\n\n}\n"
  },
  {
    "id": "20250416151107-0000007",
    "name": "main-editor_area",
    "type": "css",
    "enabled": true,
    "content": "/* 编辑区填充 */\n\n.protyle-wysiwyg {\n\n    padding: 25px 50px 285px !important;\n\n}\n\n\n\n.protyle-wysiwyg span[data-type~=em], .protyle-wysiwyg em {\n\n    font-family: \"Maple Mono NF CN\", serif;\n\n}\n\n\n\n.protyle-title.protyle-wysiwyg--attr {\n\n    margin: 5px 50px 0 !important;\n\n}\n"
  },
  {
    "id": "20250416151107-0000008",
    "name": "main-main",
    "type": "css",
    "enabled": true,
    "content": ":root {\n\n    --b3-theme-background: #1e1e1e;\n\n    --b3-theme-background-light: rgba(255, 255, 255, .075);\n\n    --b3-theme-surface: #2b2b2b;\n\n    --b3-font-family: \"yahei consolas hybrid\", \"Maple Mono NF CN\", system-ui, ui-sans-serif, -apple-system, BlinkMacSystemFont, \"SF Pro SC\", \"SF Pro Text\", \"SF Pro Icons\", \"Helvetica Neue\", \"Luxi Sans\", \"DejaVu Sans\", \"PingFang SC\", \"Segoe UI\", \"Microsoft Yahei\", \"Hiragino Sans GB\", sans-serif, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"Segoe UI Symbol\", \"Android Emoji\", \"EmojiSymbols\" !important;\n\n}\n\n\n\n\n\n\n\n.b3-typography:not(.b3-typography--default),\n\n.protyle-wysiwyg,\n\n.protyle-title {\n\n    font-family: \"yahei consolas hybrid\", \"Maple Mono NF CN\", system-ui, ui-sans-serif, -apple-system, BlinkMacSystemFont,\n\n    \"SF Pro SC\", \"SF Pro Text\", \"SF Pro Icons\", \"Helvetica Neue\", \"Luxi Sans\", \"DejaVu Sans\", \"PingFang SC\", \"Segoe UI\",\n\n    \"Microsoft Yahei\", \"Hiragino Sans GB\", sans-serif, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"Segoe UI Symbol\", \"Android Emoji\", \"EmojiSymbols\" !important;\n\n}\n\n\n\nbody:not(.body-asri--mobile,.body--window) {\n\n    --toolbar-height: 32px;\n\n    --toolbar-height-self: 32px;\n\n    --topbar-z-index: 2;\n\n    --avoid-topbar-self: var(--toolbar-height-self);\n\n}\n\n\n\nbody:not(.body-asri--mobile,.body--window) .layout__center .layout-tab-bar:not(body:not(.body-asri--mobile,.body--window) .layout__center .layout-tab-bar--readonly) {\n\n    margin-top: 4px;\n\n    margin-right: 4px;\n\n}\n\n\n\nbody:not(.body-asri--mobile,.body--window) .layout__center .layout-tab-bar--readonly {\n\n    margin-left: 0;\n\n    margin-top: 4px;\n\n    margin-right: 4px;\n\n\n\n    & .item {\n\n        min-height: 28px;\n\n    }\n\n}\n"
  },
  {
    "id": "20250416151107-0000009",
    "name": "main-status_bar",
    "type": "css",
    "enabled": true,
    "content": "body:not(.body-asri--mobile) #dockBottom.fn__none:not(.has-layout-dockb-float) ~ #status .status__msg:not(:empty) {\n\n    max-width: 1920px;\n\n}\n"
  },
  {
    "id": "20250416151107-0000010",
    "name": "main-toolbar",
    "type": "css",
    "enabled": true,
    "content": "/* toolbar */\n\n#layouts > div.fn__flex.fn__flex-1 > div.layout__center.fn__flex.fn__flex-1 > div > div > div.fn__flex {\n\n    background-color: #161616;\n\n}\n\n\n\n#AsriPluginsIconsDivider {\n\n    top: 5px !important;\n\n}\n\n\n\n.fn__flex-column[data-type=wnd] > .fn__flex:first-child {\n\n    height: var(--toolbar-height-self);\n\n}\n\n\n\n/* 标签配置 */\n\n.layout-tab-bar .item {\n\n    height: 22px;\n\n    min-height: 28px;\n\n    padding: 0;\n\n}\n\n\n\n/* 主菜单图标 */\n\n#toolbar #barWorkspace {\n\n    background-color: rgba(0, 0, 0, 0);\n\n    color: var(--b3-theme-on-surface);\n\n    font-weight: 500;\n\n    font-size: 6px;\n\n    height: 22px;\n\n    position: relative;\n\n    margin-top: 4px;\n\n    margin-bottom: 4px;\n\n    outline: 1px solid var(--b3-border-color-trans);\n\n    outline-offset: -1px;\n\n}\n\n\n\n/* 屏蔽主菜单向下箭头 */\n\n#barWorkspace > svg {\n\n    display: none;\n\n}\n\n\n\nbody:not(.body-asri--mobile,.body--window) .layout__dockl > .fn__flex:not(.fn__none):first-child .layout-tab-container,\n\nbody:not(.body-asri--mobile,.body--window) .layout__dockl > .fn__flex.fn__none ~ .fn__flex .layout-tab-container,\n\nbody:not(.body-asri--mobile,.body--window) .layout__dockr > .fn__flex:not(.fn__none):first-child .layout-tab-container,\n\nbody:not(.body-asri--mobile,.body--window) .layout__dockr > .fn__flex.fn__none ~ .fn__flex .layout-tab-container {\n\n    padding-top: var(--avoid-topbar-self);\n\n}\n\n\n\n/* 屏蔽标签页 x 号 */\n\n.layout-tab-bar span.item__close {\n\n    display: none;\n\n}\n\n\n\n/* 图标大小 位置 */\n\n.layout-tab-bar .item__icon > img, .layout-tab-bar .item__icon > svg {\n\n    height: 14px;\n\n    width: 14px;\n\n    margin-top: 0;\n\n}\n\n\n\n/* 右侧功能图标位置 */\n\ndiv#AsriTopbarRightSpacing {\n\n    max-width: 18px;\n\n}\n\n\n\n/* 面包屑 */\n\n.protyle-breadcrumb {\n\n    height: 30px;\n\n}\n"
  },
  {
    "id": "20250416151107-0000011",
    "name": "markdown-code",
    "type": "css",
    "enabled": true,
    "content": "/* 字体 */\n\n:root {\n\n    --b3-font-family-code: 'ibm plex mono', 'yahei consolas hybrid';\n\n}\n\n\n\n/* 代码块 行高度 */\n\n.code-block .hljs > span {\n\n    line-height: 19px;\n\n}\n\n\n\n/* 列表下 距离左侧距离 */\n\ndiv.li .code-block {\n\n    left: 30px;\n\n}\n\n\n\n.protyle-wysiwyg .code-block {\n\n    --b3-protyle-code-linenumber-hl: color-mix(in srgb, var(--b3-theme-surface) 55%, var(--b3-theme-primary));\n\n    margin: .4em 0 1em 0 !important; /* bottom 连续代码块给命名腾出个地方 */\n\n    padding: 0.3em 0.2em 0.3em 0.2em !important;\n\n}\n\n\n\n/* 代码块整体 默认设置存在行号*/\n\n.protyle-wysiwyg .code-block .hljs {\n\n    padding: 0.3em 0.2em 0.3em 0.2em;\n\n    background-color: var(--b3-code-block-backgroud-color);\n\n    /* margin-left: 2.2em; 没有行号的时候清空样式 */\n\n    position: inherit;\n\n    max-height: 550px; /* 设置单一代码块最大高度 */\n\n}\n\n\n\n/* 隐藏代码块后 去除上面的 padding 和 maring 显示第一行代码 */\n\n.protyle-wysiwyg .code-block[fold=\"1\"] .hljs {\n\n    padding-top: 0;\n\n    margin-top: 0;\n\n}\n\n\n\n/* 行号 */\n\n.protyle-wysiwyg .code-block .protyle-linenumber__rows {\n\n    padding-top: 0px;\n\n    font-size: 12px;\n\n    width: 2.2em;\n\n}\n\n\n\n/* 标题栏 */\n\n.protyle-wysiwyg[data-readonly=false] .code-block .protyle-action {\n\n    -webkit-user-modify: read-only;\n\n    /* 修复第一行代码不可点击 修复后 -> 前85%的位置可以点击 */\n\n    position: absolute;\n\n    left: 95%;\n\n    top: 0;\n\n}\n\n\n\n/* 语言选择栏 */\n\n.code-block .protyle-action .protyle-action__language {\n\n    -webkit-user-modify: read-only;\n\n    margin-top: 0;\n\n    position: absolute;\n\n    right: inherit;\n\n    float: right;\n\n    width: 90px;\n\n    padding-left: 0;\n\n    margin-left: 0;\n\n    margin-right: 4em;\n\n    text-align: right;\n\n}\n\n\n\n/* 复制按钮 */\n\n.protyle-action .protyle-action__copy {\n\n    border-top-left-radius: 8px;\n\n    border-bottom-left-radius: 8px;\n\n    /*border-radius: 8px;*/\n\n    padding-left: 6px;\n\n}\n\n\n\n/* 复制按钮 折叠按钮 */\n\n.protyle-action .protyle-icon--expand {\n\n    border-top-right-radius: 8px;\n\n    border-bottom-right-radius: 8px;\n\n}\n\n\n\n/* 更多按钮 */\n\n.protyle-action .protyle-icon--last {\n\n    display: none;\n\n}\n\n\n\n/* 属性名 */\n\n.code-block > .protyle-attr {\n\n    top: -16px;\n\n}\n\n\n\n.protyle-wysiwyg [data-node-id][fold=\"1\"]:not(.li):not([data-type=NodeHeading]) {\n\n    opacity: 1;\n\n}\n\n\n\n.protyle-wysiwyg [data-node-id][fold=\"1\"]:not(.li):not([data-type=NodeHeading]) .protyle-attr {\n\n    opacity: 1;\n\n    top: -16px;\n\n}\n\n\n\n/* 代码主题设置 */\n\n.hljs {\n\n    color: #EEBEFA;\n\n    background-color: #2b2d30;\n\n    font-weight: 500;\n\n    margin-top: 3px;\n\n}\n\n\n\n.hljs-keyword {\n\n    color: #2091F6;\n\n}\n\n\n\n.hljs-string {\n\n    color: #827CDA;\n\n}\n\n\n\n.hljs-attr {\n\n    color: #40CFDC;\n\n}\n\n\n\n.class_ {\n\n    color: #fa2aad;\n\n}\n\n\n\n.hljs-title.class_ {\n\n    color: #fa2aad;\n\n}\n\n\n\n.hljs-type {\n\n    color: #FF7575;\n\n}\n\n\n\n.function_ {\n\n    color: #1DF528;\n\n}\n\n\n\n.hljs-title.function_ {\n\n    color: #1DF528;\n\n}\n\n\n\n.hljs-params {\n\n    color: #45ee8c;\n\n}\n\n\n\n.hljs-comment {\n\n    color: #808080;\n\n}\n\n\n\n.hljs-built_in {\n\n    color: #00CCCC;\n\n}\n\n\n\n.hljs-attribute {\n\n    color: gold;\n\n}\n\n\n\n.hljs-selector-class {\n\n    color: #ffa07a;\n\n}\n\n\n\n.hljs-selector-tag {\n\n    color: #ea51b2;\n\n}\n\n\n\n.hljs-meta {\n\n    color: #00f769;\n\n}\n"
  },
  {
    "id": "20250416151107-0000012",
    "name": "markdown-comment",
    "type": "css",
    "enabled": true,
    "content": "[data-theme-mode=dark] .protyle-wysiwyg span[data-type~=inline-memo]:hover {\n\n    color: #fdfae8 !important; /* 鼠标移到焦点后下划线颜色 */\n\n    background-color: rgba(0, 0, 0, 0);\n\n    box-shadow: none;\n\n}\n\n\n\n[data-theme-mode=dark] .protyle-wysiwyg span[data-type~=inline-memo] {\n\n    text-decoration-color: #00c2ff; /* 默认下划线颜色 */\n\n}\n\n\n\n[data-theme-mode=dark] .tooltip--memo#tooltip {\n\n    margin-top: 3px;\n\n    margin-left: 3px;\n\n    background-color: #2e3236;\n\n    color: #c78eda;\n\n}\n\n\n\n[data-theme-mode=dark] .protyle-wysiwyg--attr .protyle-attr > div:not(.protyle-attr--memo):not(.protyle-attr--refcount) {\n\n    color: #00b6ff;\n\n}\n\n\n\n.protyle-wysiwyg [data-node-id] span[data-type~=block-ref]:not(.av__celltext), .protyle-wysiwyg [data-node-id] span[data-type~=file-annotation-ref] {\n\n    color: #6791f3;\n\n}\n"
  },
  {
    "id": "20250416151107-0000013",
    "name": "markdown-content",
    "type": "css",
    "enabled": true,
    "content": "/* 加粗文本颜色 */\n\n.protyle-wysiwyg span[data-type~=strong],\n\n.protyle-wysiwyg strong {\n\n    color: #fbd80e;\n\n}\n\n\n\n.protyle-wysiwyg [data-node-id].li > .list {\n\n    margin-left: 10px !important;\n\n    padding-left: 16px;\n\n    padding-top: 0;\n\n    padding-bottom: 0\n\n}\n\n\n\n/* 文档上面的间距 */\n\nbody:not(.body--mobile) .protyle-background .protyle-background__img.fn__none + .protyle-background__ia {\n\n    margin-top: 0;\n\n    padding-top: 0;\n\n}\n\n\n\n/* 文档前缀表情 */\n\n.b3-typography img.emoji, .protyle-wysiwyg img.emoji {\n\n    width: 24px;\n\n    cursor: auto;\n\n    vertical-align: middle;\n\n    margin-right: 2px;\n\n    margin-left: -3px;\n\n}\n"
  },
  {
    "id": "20250416151107-0000014",
    "name": "markdown-label",
    "type": "css",
    "enabled": true,
    "content": ".b3-chip--secondary, .b3-chip--primary, .b3-chip--info, .b3-chip--success,\n\n.b3-chip--warning, .b3-chip--error, .b3-chip--pink {\n\n    mix-blend-mode: normal !important;\n\n}\n\n\n\n.b3-chip--secondary::before,\n\n.b3-chip--primary::before,\n\n.b3-chip--info::before,\n\n.b3-chip--success::before,\n\n.b3-chip--warning::before,\n\n.b3-chip--error::before,\n\n.b3-chip--pink::before {\n\n    content: \"#\" !important;\n\n    margin-right: 5px; /* # 号距离文字的距离 */\n\n}\n\n\n\n/* 当鼠标移动到标签的时候 给x腾出空间 不显示前面的`#` */\n\n.b3-chip--secondary:hover::before,\n\n.b3-chip--primary:hover::before,\n\n.b3-chip--info:hover::before,\n\n.b3-chip--success:hover::before,\n\n.b3-chip--warning:hover::before,\n\n.b3-chip--error:hover::before,\n\n.b3-chip--pink:hover::before {\n\n    content: \"\" !important;\n\n}\n\n\n\n.protyle-background__ia .b3-chips {\n\n    margin-top: 18px;\n\n    padding: 0 0 0 0;\n\n}\n\n\n\n.protyle-background .b3-chip--secondary {\n\n    color: #fff !important;\n\n    background-color: #d6ff0070 !important;\n\n}\n\n\n\n.protyle-background .b3-chip--primary {\n\n    color: #fff !important;\n\n    background-color: #0053f9c4 !important;\n\n}\n\n\n\n.protyle-background .b3-chip--info {\n\n    color: var(--b3-card-info-color) !important;\n\n    background-color: #28405c !important;\n\n}\n\n\n\n.protyle-background .b3-chip--success {\n\n    color: var(--b3-card-success-color) !important;\n\n    background-color: #425347 !important;\n\n}\n\n\n\n.protyle-background .b3-chip--warning {\n\n    color: var(--b3-card-warning-color) !important;\n\n    background-color: #554636 !important;\n\n}\n\n\n\n.protyle-background .b3-chip--error {\n\n    color: var(--b3-card-error-color) !important;\n\n    background-color: #442724 !important;\n\n}\n\n\n\n.protyle-background .b3-chip--pink {\n\n    color: var(--b3-theme-on-secondary) !important;\n\n    background-color: #ea4aaa96 !important;\n\n}\n\n\n\n/* 行级标签 */\n\n.protyle-wysiwyg [data-node-id] span[data-type~=tag] {\n\n    --tag-color: #df8300;\n\n    font-size: 85%;\n\n}\n"
  },
  {
    "id": "20250416151107-0000015",
    "name": "markdown-line_code",
    "type": "css",
    "enabled": true,
    "content": "/* 行级代码 */\n\n.protyle-wysiwyg span[data-type~=code], .protyle-wysiwyg code:not(.hljs) {\n\n    color: #00e100;\n\n    margin-left: 4px;\n\n    margin-right: 4px;\n\n    display: ruby;\n\n}\n\n\n\n/* fix 行级代码残留问题 */\n\n.b3-typography code:not(.hljs),\n\n.b3-typography span[data-type~='code'],\n\n.protyle-wysiwyg code:not(.hljs),\n\n.protyle-wysiwyg span[data-type~='code'] {\n\n    word-break: break-all;\n\n}\n"
  },
  {
    "id": "20250416151107-0000016",
    "name": "markdown-link",
    "type": "css",
    "enabled": true,
    "content": ".protyle-wysiwyg [data-node-id] span[data-type~=a], .protyle-wysiwyg a {\n\n    color: var(--b3-protyle-inline-link-color);\n\n    text-decoration-line: underline;\n\n    text-decoration-thickness: .08em;\n\n    text-decoration-color: var(--b3-protyle-inline-link-color);\n\n}\n"
  },
  {
    "id": "20250416151107-0000017",
    "name": "markdown-list",
    "type": "css",
    "enabled": true,
    "content": ".protyle-wysiwyg [data-node-id].li > [data-node-id] {\n\n    padding-right: 0;\n\n}\n\n\n\n.b3-typography li > p,\n\n.b3-typography > p,\n\n.b3-typography blockquote > p,\n\n.b3-typography [data-node-id],\n\n.protyle-wysiwyg li > p,\n\n.protyle-wysiwyg > p,\n\n.protyle-wysiwyg blockquote > p,\n\n.protyle-wysiwyg [data-node-id] {\n\n    line-height: 1.7;\n\n    padding: 2px 2px 2px 0;\n\n    margin: 0 0;\n\n    border-radius: var(--b3-border-radius);\n\n}\n\n\n\ndiv.li > div.p > div {\n\n    margin-left: 8px !important;\n\n}\n\n\n\n/* 效果: 一级列表 1.  二级列表 1.1  三级列表 1.1.1 */\n\n.list[data-subtype=o] {\n\n    counter-reset: none;\n\n}\n\n\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] > .protyle-action,\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] > .protyle-action,\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] > .protyle-action {\n\n    color: rgba(0, 0, 0, 0) !important;\n\n}\n\n\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] > .protyle-action::after,\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] > .protyle-action::after,\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] > .protyle-action::after {\n\n    display: table;\n\n}\n\n\n\n.protyle-wysiwyg .li[data-subtype=o] {\n\n    counter-increment: olcounter1\n\n}\n\n\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] {\n\n    counter-increment: olcounter2;\n\n    padding-left: 10px;\n\n}\n\n\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] {\n\n    counter-increment: olcounter3;\n\n    padding-left: 28px;\n\n}\n\n\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] {\n\n    counter-increment: olcounter4;\n\n    padding-left: 46px;\n\n}\n\n\n\n/* 有序列表计数 */\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] > .protyle-action::after {\n\n    content: counter(olcounter1, -moz-devanagari) \".\" counter(olcounter2, decimal);\n\n}\n\n\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] > .protyle-action::after {\n\n    content: counter(olcounter1, decimal) \".\" counter(olcounter2, decimal) \".\" counter(olcounter3, decimal)\n\n}\n\n\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] > .protyle-action::after {\n\n    content: counter(olcounter1, decimal) \".\" counter(olcounter2, decimal) \".\" counter(olcounter3, decimal) \".\" counter(olcounter4, decimal)\n\n}\n"
  },
  {
    "id": "20250416151107-0000018",
    "name": "markdown-photo",
    "type": "css",
    "enabled": true,
    "content": "/* 图片居中 */\n\n[data-type=\"img\"] {\n\n    width: 33%;\n\n    min-width: calc(100% - 0.1em);\n\n}\n\n\n\n/* 去除图片后的多余空行 CSS片段 */\n\n.b3-typography .img:not([style]), .protyle-wysiwyg .img:not([style]) {\n\n    display: inline-block;\n\n}\n"
  },
  {
    "id": "20250416151107-0000019",
    "name": "markdown-refference",
    "type": "css",
    "enabled": true,
    "content": ".bq[data-type=\"NodeBlockquote\"] > .p,\n\n.bq .p {\n\n    margin-left: 10px;\n\n}\n"
  },
  {
    "id": "20250416151107-0000020",
    "name": "markdown-table",
    "type": "css",
    "enabled": true,
    "content": ":is(.b3-typography,.protyle-wysiwyg) :is([data-node-id].table table), :is(.b3-typography,.protyle-wysiwyg) table {\n\n    margin-top: 12px;\n\n}\n\n\n\n.table .protyle-attr {\n\n    top: -6px;\n\n    font-size: 14px;\n\n}\n"
  },
  {
    "id": "20250416151107-0000021",
    "name": "markdown-title",
    "type": "css",
    "enabled": true,
    "content": ".protyle-wysiwyg .h1, .protyle-wysiwyg h1 {\n\n    margin-top: 0.3em;\n\n    text-align: center;\n\n    color: red;\n\n    border-bottom: 2px solid; /* 设置下边框的颜色和厚度 边框颜色设置为透明 */\n\n    border-color: transparent; /* 边框颜色设置为透明 */\n\n    border-image: linear-gradient(to right, #f00, #00f) 1; /* 设置渐变边框 */\n\n    border-radius: 0;\n\n}\n\n\n\n.protyle-wysiwyg .h2, .protyle-wysiwyg h2 {\n\n    color: #2091F6;\n\n    margin-top: 0.3em;\n\n}\n\n\n\n.protyle-wysiwyg .h3, .protyle-wysiwyg h3 {\n\n    color: #8694ff;\n\n    margin-top: 0.2em;\n\n}\n\n\n\n.protyle-wysiwyg .h4, .protyle-wysiwyg h4 {\n\n    color: #ffa54b;\n\n}\n\n\n\n.protyle-wysiwyg .h5, .protyle-wysiwyg h5 {\n\n    color: #9cfd57;\n\n}\n\n\n\n.protyle-wysiwyg .h6, .protyle-wysiwyg h6 {\n\n    color: #e7fd1a;\n\n}\n\n\n\n/* 超级块 h2 右移动一部分 */\n\n.sb > div.h2 {\n\n    text-align: center;\n\n}\n"
  },
  {
    "id": "20250416151107-0000022",
    "name": "markdown-siyuan-block_refenerce",
    "type": "css",
    "enabled": true,
    "content": ".protyle-wysiwyg [data-node-id] span[data-type~=block-ref]:not(.av__celltext), .protyle-wysiwyg [data-node-id] span[data-type~=file-annotation-ref] {\n\n    text-decoration-color: #2f89fd\n\n}\n"
  },
  {
    "id": "20250416151107-0000023",
    "name": "markdown-siyuan-database",
    "type": "css",
    "enabled": true,
    "content": "/* 隐藏除了特定数据库块的其他主键列 CSS片段 */\n\n/* author by JeffreyChen https://ld246.com/article/1728354035172 */\n\n/* 启用代码片段后，给需要保留主键的数据库块添加自定义属性：hide-block=false */\n\n.protyle-wysiwyg .av:not([custom-hide-block=false]) [data-dtype=\"block\"] {\n\n    display: none;\n\n}\n\n\n\n.protyle-wysiwyg .av:not([custom-hide-block=false]) .av__calc[data-dtype=\"block\"]:first-child + .av__calc {\n\n    padding-left: 1.625em;\n\n    box-sizing: initial;\n\n}\n\n\n\n/* 缩小显示标签 */\n\nspan.b3-chip {\n\n    margin-left: 2px !important;\n\n    font-size: 14px;\n\n}\n\n\n\n/* 表格内容右对齐 */\n\n.av__scroll .av__row .av__cell:not(.av__cell--header) {\n\n    text-align: right;\n\n}\n\n\n\n/* 抵消外部 Item 样式 */\n\ndiv.fn__flex.av__views > div.layout-tab-bar.fn__flex .item {\n\n    margin-bottom: 0px;\n\n}\n"
  },
  {
    "id": "20250416151107-0000024",
    "name": "markdown-siyuan-super_blocl",
    "type": "css",
    "enabled": true,
    "content": "/* 二级超级块 添加边框 */\n\n\n\n.protyle-wysiwyg .sb {\n\n    margin: 4px 8px 8px 4px !important;\n\n\n\n\n\n    & .p {\n\n        margin-left: 10px;\n\n    }\n\n}\n\n\n\n.protyle-wysiwyg [data-node-id].sb[data-sb-layout=col] > div {\n\n    margin-right: 0;\n\n}\n"
  },
  {
    "id": "20250416151107-0000025",
    "name": "miscellaneous-plugin",
    "type": "css",
    "enabled": true,
    "content": ".self_cloud {\n\n    width: 450px;\n\n    height: 35px;\n\n}\n"
  },
  {
    "id": "20250416151107-0000026",
    "name": "miscellaneous-search",
    "type": "css",
    "enabled": true,
    "content": "#searchList [data-type=search-item] .b3-list-item__meta--ellipsis, #searchUnRefList [data-type=search-item] .b3-list-item__meta--ellipsis, #searchAssetList [data-type=search-item] .b3-list-item__meta--ellipsis {\n\n    max-width: calc(100% - 22px);\n\n    padding: 6px 0 8px 8px;\n\n    line-height: 1;\n\n    float: right;\n\n    right: 0;\n\n    bottom: 12px;\n\n    color: #78dfff;\n\n}\n\n\n\n#searchList [data-type=search-item] .b3-list-item__text, #searchUnRefList [data-type=search-item] .b3-list-item__text, #searchAssetList [data-type=search-item] .b3-list-item__text {\n\n    line-height: 1;\n\n    -webkit-line-clamp: 1;\n\n    display: contents;\n\n}\n\n\n\n#searchList [data-type=search-item], #searchUnRefList [data-type=search-item], #searchAssetList [data-type=search-item] {\n\n    flex-wrap: wrap;\n\n    padding: 4px;\n\n    display: flow-root;\n\n    justify-content: none;\n\n}\n\n\n\n/* 匹配选中颜色 */\n\n@supports (color: oklch(from red clamp(0, l * 0.5, 0.3) 0 h)) {\n\n    [data-theme-mode=dark] body:not(.has-exportimg) .protyle-wysiwyg [data-node-id] span[data-type~=search-mark].search-mark--hl {\n\n        box-shadow: 0 0 0 0.5px color(srgb 0 0.97 0.53), 0 13px 25px -2px color(srgb 0.08 0.83 0.53 / 0.4), 0 0 10px 0 rgb(from var(--b3-theme-accent) r g b / 0.2);\n\n    }\n\n}\n\n\n\n@supports (color: oklch(from red clamp(0, l * 0.5, 0.3) 0 h)) {\n\n    body:not(.has-exportimg) .protyle-wysiwyg [data-node-id] span[data-type~=search-mark].search-mark--hl {\n\n        background-color: oklch(0.73 0.22 149.52 / 0.38) !important;\n\n        box-shadow: 0 0 0 1px rgb(from var(--b3-theme-accent) r g b / 0.075), 0 13px 25px -2px rgb(from var(--b3-theme-accent) r g b / 0.075), 0 0 10px 0 rgb(from var(--b3-theme-accent) r g b / 0.075);\n\n    }\n\n}\n"
  },
  {
    "id": "20250416151107-0000027",
    "name": "pop_window-color_choice",
    "type": "css",
    "enabled": true,
    "content": ".protyle-util [style*=\"color:var(--b3-font-color\"] {\n\n    font-size: 1.5em;\n\n    background: #00000000;\n\n    border: none;\n\n}\n\n\n\n/* 清除字体颜色的 box 样式 */\n\n.color__square,\n\n.color__square:hover {\n\n    box-shadow: 0 0 0 0 inset var(--b3-border-color-trans);\n\n}\n\n\n\n/* 去除无用的按钮 */\n\n.protyle-util .protyle-font > div:nth-child(n+5):nth-child(-n+8),\n\n.protyle-util .protyle-font > div:nth-child(n+17):nth-child(-n+20),\n\n.protyle-util .protyle-font > div:nth-child(22),\n\n.protyle-util .protyle-font > div:nth-child(24) {\n\n    display: none;\n\n}\n\n\n\n.protyle-util .protyle-font > div:nth-child(21) {\n\n    display: inline;\n\n    font-size: 16px;\n\n    position: relative;\n\n    top: 3px;\n\n    left: 5px;\n\n}\n\n\n\n.protyle-util .protyle-font > div:nth-child(21)::after {\n\n    content: \":  \"\n\n}\n\n\n\ndiv.protyle-util .protyle-font > div:nth-child(23),\n\ndiv.protyle-util .protyle-font > div:nth-child(25) {\n\n    display: inline !important;\n\n    width: 120px;\n\n}\n\n\n\ndiv.protyle-util .protyle-font > div:nth-child(23) > select {\n\n    width: 120px;\n\n    margin-right: 4em;\n\n}\n\n\n\n.protyle-util .protyle-font {\n\n    max-width: none;\n\n}\n\n\n\n.protyle-font .b3-button {\n\n    border-radius: 7px;\n\n    padding: 4px 9px;\n\n    color: var(--b3-theme-on-background);\n\n    outline: 1px solid rgb(from var(--b3-theme-on-background) r g b / 0.2);\n\n    display: inline;\n\n    width: 103px;\n\n    position: relative;\n\n    right: 38px;\n\n    text-align: right;\n\n    font-size: 16px;\n\n}\n\n\n\n/* 清除样式历史记录优化 */\n\n.protyle-font .b3-button svg {\n\n    top: 6px;\n\n    position: absolute;\n\n    left: 10px;\n\n}\n\n\n\nbutton.protyle-font__style[data-type=\"clear\"] {\n\n    font-size: 0;\n\n    line-height: 0;\n\n}\n\n\n\n.protyle-font > div:nth-child(15) > button::before,\n\n.protyle-font > div:nth-child(3) > button[aria-label=\"背景颜色\"]::before {\n\n    content: \"A\";\n\n}\n"
  },
  {
    "id": "20250416151107-0000028",
    "name": "pop_window-emoji",
    "type": "css",
    "enabled": true,
    "content": "/*  这段代码会导致上下键失效 暂时无解决方法 先弃用\n\n.emojis__title[data-type=\"0\"],\n\n.emojis__title[data-type=\"1\"],\n\n.emojis__title[data-type=\"0\"] + div {\n\n    display: none;\n\n}\n\n*/\n\n\n\n/* 选中表情 背景颜色 定位当前表情 */\n\n.emojis__item--current, .emojis__item:hover {\n\n    background: #6aace7 !important;\n\n}\n\n\n\n/* 单个表情框的圆角 */\n\n.emojis__item {\n\n    border-radius: 6px;\n\n}\n"
  },
  {
    "id": "20250416151107-0000029",
    "name": "pop_window-slash_menu",
    "type": "css",
    "enabled": true,
    "content": "/* /菜单弹出框 搜索后第一个元素 取消margin-top */\n\n.protyle-hint.b3-list.b3-list--background.hint--menu > div > button:nth-child(1),\n\n.protyle-hint.b3-list.b3-list--background.hint--menu .b3-menu__separator + button .b3-list-item__first {\n\n    margin-top: 0;\n\n    border-top: 0.1px solid; /* 设置下边框的厚度 */\n\n    border-color: transparent; /* 边框颜色设置为透明 */\n\n    border-radius: 0;\n\n    line-height: 27px;\n\n}\n\n\n\n.protyle-hint.b3-list.b3-list--background.hint--menu > div > button {\n\n    margin-left: 6px;\n\n    margin-right: 0;\n\n}\n\n\n\n.protyle-hint.b3-list.b3-list--background.hint--menu .b3-menu__separator {\n\n    display: none;\n\n}\n"
  },
  {
    "id": "20250416151107-0000030",
    "name": "sidebar-filetree",
    "type": "css",
    "enabled": true,
    "content": "/* 设置文档树字体大小 */\n\n.file-tree.fn__flex-1 {\n\n    font-size: 12px;\n\n}\n\n\n\n/* 隐藏: 文档树->文档->图标\n\n/* .file-tree>.fn__flex-1>ul>li>span.b3-list-item__icon.b3-tooltips.b3-tooltips__e {display:contents;} 显示第一层的图标*/\n\n.file-tree > .fn__flex-1 ul > li > span.b3-list-item__icon {\n\n    display: none;\n\n}\n\n\n\n/* 隐藏: 文档树->笔记本->更多设置按钮 */\n\n.file-tree > .fn__flex-1 > ul > li > span[data-type=\"more-root\"] {\n\n    display: none !important;\n\n}\n\n\n\n/* 隐藏: 文档树->文档-> 更多设置按钮 */\n\n.file-tree > .fn__flex-1 ul > li > span[data-type=\"more-file\"] {\n\n    display: none !important;\n\n}\n\n\n\n/* 隐藏: 文档树->文档->文档被引用个数 */\n\n.file-tree .popover__block {\n\n    display: hidden !important;\n\n}\n\n\n\n/* 隐藏文档树缩进线 */\n\n.file-tree > .fn__flex-1 ul {\n\n    background-image: none !important;\n\n}\n\n\n\n/*.file-tree > .fn__flex-1 {\n\n    --indent-color-inactive: none;\n\n    --indent-color-active: none;\n\n}*/\n\n\n\n/* [CSS片段] 文档树压缩  */\n\n:root {\n\n    /* 22, 40, 58, 76, 94, 112, 130 */\n\n    --level-tree-compress-scale: 0.01;\n\n    --level-tree-compress-0: 2px;\n\n    --level-tree-compress-spacing: 1px;\n\n    --level-tree-compress-spacing-res: calc(var(--level-tree-compress-spacing) * var(--level-tree-compress-scale));\n\n\n\n    --level-tree-compress-2: calc(var(--level-tree-compress-0) + var(--level-tree-compress-spacing-res));\n\n    --level-tree-compress-3: calc(var(--level-tree-compress-2) + var(--level-tree-compress-spacing-res));\n\n    --level-tree-compress-4: calc(var(--level-tree-compress-3) + var(--level-tree-compress-spacing-res));\n\n    --level-tree-compress-5: calc(var(--level-tree-compress-4) + var(--level-tree-compress-spacing-res));\n\n    --level-tree-compress-6: calc(var(--level-tree-compress-5) + var(--level-tree-compress-spacing-res));\n\n    --level-tree-compress-7: calc(var(--level-tree-compress-6) + var(--level-tree-compress-spacing-res));\n\n    --level-tree-compress-8: calc(var(--level-tree-compress-7) + var(--level-tree-compress-spacing-res));\n\n\n\n    --file-tree-margin-left: 7px;\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > li > span.b3-list-item__toggle {\n\n    padding-left: var(--level-tree-compress-2) !important;\n\n    margin-left: var(--level-tree-compress-2) !important;\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > ul > li > span.b3-list-item__toggle {\n\n    padding-left: var(--level-tree-compress-3) !important;\n\n    margin-left: var(--level-tree-compress-3) !important;\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > li > span.b3-list-item__toggle {\n\n    padding-left: var(--level-tree-compress-4) !important;\n\n    margin-left: var(--level-tree-compress-4) !important;\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > li > span.b3-list-item__toggle {\n\n    padding-left: var(--level-tree-compress-5) !important;\n\n    margin-left: var(--level-tree-compress-5) !important;\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul > li > span.b3-list-item__toggle {\n\n    padding-left: var(--level-tree-compress-6) !important;\n\n    margin-left: var(--level-tree-compress-6) !important;\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul > ul > li > span.b3-list-item__toggle {\n\n    padding-left: var(--level-tree-compress-7) !important;\n\n    margin-left: var(--level-tree-compress-7) !important;\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul > ul > ul > li > span.b3-list-item__toggle {\n\n    padding-left: var(--level-tree-compress-8) !important;\n\n    margin-left: var(--level-tree-compress-8) !important;\n\n}\n\n\n\n/* 文档树 目录间隔 */\n\n.file-tree .b3-list-item {\n\n    line-height: 20px;\n\n    min-height: 14px;\n\n    padding: 0 2px;\n\n    margin: 0 0;\n\n}\n\n\n\n/* 文档树 每一级设置 */\n\n.file-tree .fn__flex-1 > ul {\n\n    margin-left: var(--file-tree-margin-left);\n\n}\n\n\n\n.file-tree .fn__flex-1 > ul > ul {\n\n    margin-left: var(--file-tree-margin-left);\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > ul {\n\n    margin-left: var(--file-tree-margin-left);\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul {\n\n    margin-left: var(--file-tree-margin-left);\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul {\n\n    margin-left: var(--file-tree-margin-left);\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul {\n\n    margin-left: var(--file-tree-margin-left);\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul > ul {\n\n    margin-left: var(--file-tree-margin-left);\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul > ul > ul {\n\n    margin-left: var(--file-tree-margin-left);\n\n}\n\n\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul > ul > ul > ul {\n\n    margin-left: var(--file-tree-margin-left);\n\n}\n"
  },
  {
    "id": "20250416151107-0000031",
    "name": "sidebar-main",
    "type": "css",
    "enabled": true,
    "content": "#protyle-sidebar {\n\n    top: 108px;\n\n}\n\n\n\n/* 选中高亮 */\n\n.b3-list-item--focus .ariaLabel {\n\n    color: #00fd00 !important;\n\n}\n\n\n\n/* 选择父元素高亮 */\n\nli:has(+ ul .b3-list-item--focus) .b3-list-item__text {\n\n    color: red !important;\n\n    font-weight: 600 !important;\n\n}\n\n\n\n/* 缩小最外面的左边距 */\n\n.fn__flex.fn__flex-1 .b3-list-item {\n\n    margin-left: 0;\n\n}\n"
  },
  {
    "id": "20250416151107-0000032",
    "name": "sidebar-outline",
    "type": "css",
    "enabled": true,
    "content": "/* 显示标题 */\n\n.sy__outline .b3-list-item[title] {\n\n    display: inherit;\n\n}\n\n\n\n/* 字体 大小 清晰度 */\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h1] .b3-list-item__text::before,\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h2] .b3-list-item__text::before,\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h3] .b3-list-item__text::before,\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h4] .b3-list-item__text::before,\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h5] .b3-list-item__text::before,\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h6] .b3-list-item__text::before {\n\n    font-size: 14px !important;\n\n    opacity: 1;\n\n    font-family: 'yahei consolas hybrid', 'ibm plex mono', serif;\n\n}\n\n\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h1] .b3-list-item__text::before {\n\n    content: \"⓵\";\n\n    color: red;\n\n}\n\n\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h2] .b3-list-item__text::before {\n\n    content: \"𝟮\";\n\n    color: #0087ff;\n\n}\n\n\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h3] .b3-list-item__text::before {\n\n    content: \"𝟯\";\n\n    color: #8694ff;\n\n}\n\n\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h4] .b3-list-item__text::before {\n\n    content: \"𝟒\";\n\n    color: #ffa54b;\n\n}\n\n\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h5] .b3-list-item__text::before {\n\n    content: \"𝟓\";\n\n    color: #9cfd57;\n\n}\n\n\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h6] .b3-list-item__text::before {\n\n    content: \"⒍\";\n\n    color: #e7fd1a;\n\n}\n"
  },
  {
    "id": "20250416151107-0000033",
    "name": "-block_ctrl_w_close_pin_tab",
    "type": "js",
    "enabled": true,
    "content": "// version 3 from wilsons\n\n// see https://ld246.com/article/1723109908986\n\n(()=>{\n\n  // 注入样式，模拟激活标签的样式，可根据自己的样式进行调整\n\n  addStyle(`\n\n        .layout__wnd--active .layout-tab-bar .item--pin--focus:after {\n\n            background-color: var(--b3-theme-primary);\n\n        }\n\n        .layout-tab-bar .item--pin--focus:after {\n\n            content: \"\";\n\n            width: 100%;\n\n            height: 3px;\n\n            border-radius: var(--b3-border-radius);\n\n            bottom: 0;\n\n            position: absolute;\n\n            background-color: var(--b3-theme-background-light);\n\n        }\n\n    `);\n\n\n\n  // 是否在最近打开文档对话框中，将钉住标签移动到当前焦点的下面，默认不移动，改为true时则移动\n\n  const isMovePinTabToFocusNextInRecentlyDialog  = true;\n\n\n\n  // 是否在标签切换对话框中，将钉住标签移动到当前焦点的下面，默认不移动，改为true时则移动\n\n  const isMovePinTabToFocusNextInTabSwitchDialog  = true;\n\n\n\n  //////////////// 以下代码，不涉及样式调整，非必要勿动 //////////////////////\n\n\n\n  // 等待标签页容器渲染完成后开始监听\n\n  whenElementExist('.layout__center').then(async element => {\n\n    // 记录按键前的数据状态\n\n    let originalValues = {};\n\n\n\n    // 当按ctrl+w时，临时修改item--focus为item--pin--focus\n\n    document.addEventListener('keydown', function(event) {\n\n      if ((event.ctrlKey || event.metaKey) && event.key === 'w') {\n\n        // 临时修改item--focus为item--pin--focus\n\n        const focusPinTab = element.querySelector('.layout-tab-bar .item--pin.item--focus');\n\n        if(focusPinTab){\n\n          focusPinTab.classList.remove('item--focus');\n\n          focusPinTab.classList.add('item--pin--focus');\n\n        }\n\n\n\n        // 临时修改activetime为0，值为0可以避免被获得焦点\n\n        if(Object.keys(originalValues).length === 0) {\n\n          const items = element.querySelectorAll('.layout-tab-bar .item--pin');\n\n          let maxActivetimeItem = null;\n\n          let maxActivetime = 0;\n\n          items.forEach(item => {\n\n            originalValues[item.getAttribute(\"data-id\")] = item.dataset.activetime;\n\n            if(item.dataset.activetime > maxActivetime){\n\n              maxActivetime = item.dataset.activetime;\n\n              maxActivetimeItem = item;\n\n            }\n\n            item.dataset.activetime = 0;\n\n          });\n\n          // 把最后激活的文档设为下一个焦点\n\n          if(maxActivetimeItem) maxActivetimeItem.dataset.activetime = 1;\n\n        }\n\n      }\n\n    }, { capture: true });\n\n\n\n    // 当按释放按键是，恢复item--pin--focus为item--focus\n\n    document.addEventListener('keyup', function(event) {\n\n      // 恢复item--pin--focus为item--focus\n\n      const focusPinTab = element.querySelector('.layout-tab-bar .item--pin.item--pin--focus');\n\n      if(focusPinTab){\n\n        focusPinTab.classList.remove('item--pin--focus');\n\n        focusPinTab.classList.add('item--focus');\n\n      }\n\n\n\n      // 恢复activetime的值\n\n      if(Object.keys(originalValues).length > 0) {\n\n        const items = element.querySelectorAll('.layout-tab-bar .item--pin');\n\n        items.forEach(item => {\n\n          if(item.dataset.activetime <= 1) item.dataset.activetime = originalValues[item.getAttribute(\"data-id\")];\n\n        });\n\n        //清空originalValues\n\n        Object.keys(originalValues).forEach(key => {\n\n          delete originalValues[key];\n\n        });\n\n      }\n\n    }, true);\n\n\n\n    // 监听最近打开文档 和 页签切换\n\n    if(isMovePinTabToFocusNextInRecentlyDialog || isMovePinTabToFocusNextInTabSwitchDialog) {\n\n      observeDialogShow((node, dialog)=>{\n\n        // 监听最近打开文档\n\n        if(dialog === 'dialog-recentdocs'){\n\n          // 获取所有钉住的标签\n\n          const pinTabNodeIds = getAllPinTabNodeIds();\n\n          // 把所有最近文档的钉住标签，移动到当前焦点的下面\n\n          movePinTabItemToFocusTabNext(node, pinTabNodeIds);\n\n        }\n\n        // 监听页签切换\n\n        if(dialog === 'dialog-switchtab'){\n\n          // 获取所有钉住的标签\n\n          const pinTabNodeIds = getAllPinTabNodeIds();\n\n          // 把所有最近文档的钉住标签，移动到当前焦点的下面\n\n          movePinTabItemToFocusTabNext(node, pinTabNodeIds);\n\n        }\n\n      });\n\n    }\n\n\n\n  });\n\n\n\n  // 获取所有的指定标签的nodeId\n\n  function getAllPinTabNodeIds() {\n\n    const pinTabs = document.querySelectorAll(\".layout__center .layout-tab-bar li.item--pin\");\n\n    let pinTabNodeIds = [];\n\n    pinTabs.forEach(pin => {\n\n      let initData = pin.getAttribute(\"data-initdata\");\n\n      if(initData){\n\n        // 初始化时的数据\n\n        initData = JSON.parse(initData);\n\n        if(initData && initData.blockId) {\n\n          pinTabNodeIds.push(initData.blockId);\n\n        }\n\n      } else {\n\n        // 内容加载后的数据\n\n        const dataId = pin.getAttribute(\"data-id\");\n\n        const parents = pin.closest(\"div.fn__flex\");\n\n        const nodeId = parents?.nextElementSibling?.querySelector('div[data-id=\"'+dataId+'\"] .protyle-breadcrumb__item svg.popover__block')?.getAttribute(\"data-id\");\n\n        if(nodeId) {\n\n          pinTabNodeIds.push(nodeId);\n\n        }\n\n      }\n\n    });\n\n    return pinTabNodeIds;\n\n  }\n\n\n\n  // 移动最近打开文档或文档切换列表的node-id在pinTabNodeIds中的元素到当前焦点的下面\n\n  async function movePinTabItemToFocusTabNext(node, pinTabNodeIds) {\n\n    let ulElement = null;\n\n    let focusElement = null;\n\n    await whenElementExist(()=>{\n\n      ulElement = node.querySelector(\"ul.b3-list--background.fn__flex-1\");\n\n      focusElement = ulElement?.querySelector(\"li.b3-list-item--focus\");\n\n      return ulElement && focusElement;\n\n    });\n\n    pinTabNodeIds.reverse();\n\n    // 遍历 pinTabNodeIds 数组\n\n    pinTabNodeIds.forEach(nodeId => {\n\n      // 查找具有相应 data-node-id 的 li 元素\n\n      const item = ulElement.querySelector(`li[data-node-id=\"${nodeId}\"]`);\n\n      if (item) {\n\n        // 将 item 插入到 focusElement 后面\n\n        focusElement.parentElement.insertBefore(item, focusElement.nextSibling);\n\n      }\n\n    });\n\n  }\n\n\n\n  // 监听对话框\n\n  function observeDialogShow(callback) {\n\n    // 创建 MutationObserver 实例\n\n    const observer = new MutationObserver((mutationsList) => {\n\n      for (let mutation of mutationsList) {\n\n        if (mutation.type === 'childList') {\n\n          // 遍历新增的子元素\n\n          for (let node of mutation.addedNodes) {\n\n            if (node.nodeType === Node.ELEMENT_NODE && node.tagName.toLowerCase() === 'div') {\n\n              if (node.hasAttribute('data-key') && node.getAttribute('data-key') === 'dialog-recentdocs') {\n\n                if(typeof callback === 'function') callback(node, 'dialog-recentdocs');\n\n              }\n\n              if (node.hasAttribute('data-key') && node.getAttribute('data-key') === 'dialog-switchtab') {\n\n                if(typeof callback === 'function') callback(node, 'dialog-switchtab');\n\n              }\n\n            }\n\n          }\n\n        }\n\n      }\n\n    });\n\n    // 配置 MutationObserver\n\n    const config = {\n\n      childList: true,\n\n    };\n\n    // 开始观察 body 的子元素\n\n    observer.observe(document.body, config);\n\n    // observer.disconnect()\n\n  }\n\n\n\n  // 延迟执行\n\n  function sleep(ms) {\n\n    return new Promise(resolve => setTimeout(resolve, ms));\n\n  }\n\n\n\n  // 等待元素渲染完成后执行\n\n  function whenElementExist(selector) {\n\n    return new Promise(resolve => {\n\n      const checkForElement = () => {\n\n        let element = null;\n\n        if (typeof selector === 'function') {\n\n          element = selector();\n\n        } else {\n\n          element = document.querySelector(selector);\n\n        }\n\n        if (element) {\n\n          resolve(element);\n\n        } else {\n\n          requestAnimationFrame(checkForElement);\n\n        }\n\n      };\n\n      checkForElement();\n\n    });\n\n  }\n\n\n\n  // 注入样式\n\n  function addStyle(styleContent) {\n\n    // 获取现有的 <style> 标签\n\n    let styleTag = document.head.querySelector('ctrl-w-not-close-tab-style');\n\n    // 如果已存在 <style> 标签\n\n    if (styleTag) {\n\n      // 删除已存在的 <style> 标签\n\n      styleTag.parentNode.removeChild(styleTag);\n\n    }\n\n    // 创建新的 <style> 标签\n\n    styleTag = document.createElement('style');\n\n    styleTag.textContent = styleContent;\n\n    // 将新的 <style> 标签添加到文档头部\n\n    document.head.appendChild(styleTag);\n\n  }\n\n})();\n"
  },
  {
    "id": "20250416151107-0000034",
    "name": "-change_link_to_mode",
    "type": "js",
    "enabled": true,
    "content": "(() => {\n\n  const style = document.createElement('style');\n\n  style.type = 'text/css';\n\n  style.innerHTML = 'span[data-type=\"url\"] { pointer-events: none; }';\n\n\n\n  let controlPressed = false;\n\n\n\n  document.addEventListener('keydown', (event) => {\n\n    if (event.key.toLowerCase() === 'control' && !controlPressed) {\n\n      controlPressed = true;\n\n      style.remove();\n\n    }\n\n  });\n\n\n\n  document.addEventListener('keyup', (event) => {\n\n    if (event.key.toLowerCase() === 'control' && controlPressed) {\n\n      controlPressed = false;\n\n      document.body.appendChild(style);\n\n    }\n\n  });\n\n\n\n  document.body.appendChild(style);\n\n})();\n"
  },
  {
    "id": "20250416151107-0000035",
    "name": "-collapse_code",
    "type": "js",
    "enabled": true,
    "content": "// 代码块添加折叠/展开/全屏/悬浮横向滚动条\n\n// see https://ld246.com/article/1744373698945\n\n// 支持在块上添加auto-height自定义属性，使块不受最大高度限制\n\n// version 0.0.5\n\n// 0.0.1 支持代码块的折叠和展开，全屏和悬浮横向滚动条\n\n// 0.0.2 美化滚动条样式\n\n// 0.0.3 修复全屏后代码块显示不全问题\n\n// 0.0.4 改进仅代码块有滚动条且内容高度大于codeMaxHeight时才显示\n\n// 0.0.5 修复新建代码块不会立刻出现折叠扩展箭头\n\n(() => {\n\n  // 当代码块内容最大高度，注意：这里的高度是指.hljs元素的高度，默认是500px\n\n  // 支持在块上添加auto-height自定义属性，使块不受最大高度限制\n\n  const codeMaxHeight = '500px';\n\n\n\n  // 是否显示全屏按钮 true 显示 false 不显示\n\n  const isEnableFullscreen = false;\n\n\n\n  // 是否显示模拟滚动条 true 显示 false 不显示\n\n  // 该功能在代码块底部超出可视区域时自动在底部显示滚动条\n\n  const isEnableScrollbar = false;\n\n\n\n  // 不支持手机版（因为手机版不需要）\n\n  if (isMobile()) return;\n\n\n\n  // 添加样式\n\n  addStyle(`\n\n        .b3-typography div.hljs, .protyle-wysiwyg .code-block:not([custom-auto-height]) div.hljs {\n\n            max-height: ${codeMaxHeight || '500px'};\n\n        }\n\n        .b3-typography .code-block:not(pre), .protyle-wysiwyg .code-block:not(pre){\n\n            margin: 2px 0; padding: 4px;\n\n        }\n\n        .b3-typography div.hljs, .protyle-wysiwyg div.hljs{\n\n                padding: 0.65em 1em 1.6em;\n\n        }\n\n        .b3-typography div.protyle-action, .protyle-wysiwyg .code-block div.protyle-action {\n\n            position: sticky;\n\n        }\n\n        /* 全屏背景色 */\n\n        :not(:root):fullscreen::backdrop {\n\n            background-color: var(--b3-theme-background);\n\n        }\n\n        /* 模拟滚动条容器 */\n\n        .scrollbar-container {\n\n          position: sticky;\n\n          bottom: 0;\n\n          width: 100%;\n\n          height: 8px;\n\n          /*background-color: #ddd;*/\n\n          cursor: pointer;\n\n          border-radius: 5px;\n\n          /*transition: opacity 0.3s ease;*/\n\n          z-index: ${++siyuan.zIndex || 9999};\n\n        }\n\n        /* 滚动条滑块 */\n\n        .scrollbar-thumb {\n\n          position: absolute;\n\n          top: 0;\n\n          left: 0;\n\n          height: 100%;\n\n          width: 20%; /* 初始滑块宽度 */\n\n          /*background-color: var(--b3-scroll-color);*/ /* light #C2C3C3 dark #4E4F58 */\n\n          box-shadow: inset 0 0 5px 5px var(--b3-scroll-color);\n\n          border-radius: 5px;\n\n          cursor: grab;\n\n        }\n\n        .scrollbar-container.f__hidden {\n\n          opacity: 0; /* 隐藏元素 */\n\n          pointer-events: none; /* 禁用鼠标交互 */\n\n          height: 0;\n\n        }\n\n    `);\n\n\n\n  // 监听代码块被加载\n\n  whenElementExist('.layout__center, #editor').then(async el => {\n\n    // 加载时执行（静态加载）\n\n    let protyle;\n\n    await whenElementExist(() => {\n\n      protyle = el.querySelector('.protyle');\n\n      return protyle && protyle?.dataset?.loading === 'finished';\n\n    });\n\n    addCodeExtends(protyle.querySelectorAll('.code-block:not(:has(.protyle-icon--expand))'), protyle);\n\n\n\n    // 滚动时执行\n\n    protyle.querySelector(\".protyle-content\").addEventListener('scroll', () => {\n\n      addCodeExtends(protyle.querySelectorAll('.code-block:not(:has(.protyle-icon--expand))'), protyle);\n\n    });\n\n\n\n    // 监听protyle加载事件（动态加载）\n\n    observeProtyleLoaded(el, protyles => {\n\n      protyles.forEach(async protyle => {\n\n        if (!protyle.classList.contains('protyle')) {\n\n          protyle = protyle.closest('.protyle');\n\n        }\n\n        // 加载时执行\n\n        addCodeExtends(protyle.querySelectorAll('.code-block:not(:has(.protyle-icon--expand))'), protyle);\n\n\n\n        // 滚动时执行\n\n        protyle.querySelector(\".protyle-content\").addEventListener('scroll', () => {\n\n          addCodeExtends(protyle.querySelectorAll('.code-block:not(:has(.protyle-icon--expand))'), protyle);\n\n        });\n\n      });\n\n    });\n\n  });\n\n\n\n  // 添加扩展按钮\n\n  let runing = false;\n\n  function addCodeExtends(codeBlocks, protyle) {\n\n    if (codeBlocks.length === 0) return;\n\n    if (runing) return;\n\n    runing = true;\n\n    setTimeout(() => { runing = false; }, 500);\n\n    codeBlocks.forEach(async code => {\n\n      if (code.querySelector('.protyle-icon--expand')) return;\n\n\n\n      // 添加折叠按钮\n\n      const hljs = code.querySelector('.hljs');\n\n      if (!hljs) return;\n\n      let expandStatus = getExpandStatus(hljs);\n\n      const ariaLabel = getAriaLabelText(expandStatus);\n\n      const expandBtnHtml = `<span class=\"b3-tooltips__nw b3-tooltips protyle-icon protyle-icon--expand protyle-action__expand protyle-custom\" aria-label=\"${ariaLabel}\"><svg><use xlink:href=\"#${expandStatus}\"></use></svg></span>`;\n\n      const moreBtn = code.querySelector('.protyle-icon--last');\n\n      if (!moreBtn) return;\n\n      await whenElementExist(() => moreBtn.getAttribute('aria-label'));\n\n      moreBtn.insertAdjacentHTML('beforebegin', expandBtnHtml);\n\n      const expandBtn = code.querySelector('.protyle-icon--expand');\n\n      expandBtn.addEventListener('click', () => {\n\n        expandStatus = getExpandStatus(hljs);\n\n        if (expandStatus === 'iconDown') {\n\n          hljs.style.maxHeight = 'none';\n\n          expandStatus = 'iconUp';\n\n        } else {\n\n          hljs.style.maxHeight = codeMaxHeight;\n\n          expandStatus = 'iconDown';\n\n        }\n\n        const useEl = expandBtn.querySelector('svg > use');\n\n        useEl.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', '#' + expandStatus);\n\n        const ariaLabel = getAriaLabelText(expandStatus);\n\n        expandBtn.setAttribute('aria-label', ariaLabel);\n\n      });\n\n\n\n      // 添加全屏按钮\n\n      if (!isEnableFullscreen) return;\n\n      if (code.querySelector('.protyle-icon--fullscreen')) return;\n\n      let fullscreenAriaLabel = '全屏';\n\n      let fullscreenStatus = 'iconFullscreen';\n\n      const fullscreenBtnHtml = `<span class=\"b3-tooltips__nw b3-tooltips protyle-icon protyle-icon--fullscreen protyle-action__fullscreen protyle-custom\" aria-label=\"${fullscreenAriaLabel}\"><svg><use xlink:href=\"#${fullscreenStatus}\"></use></svg></span>`;\n\n      expandBtn.insertAdjacentHTML('beforebegin', fullscreenBtnHtml);\n\n      const fullscreenBtn = code.querySelector('.protyle-icon--fullscreen');\n\n      let oldCodeMaxHeight;\n\n      fullscreenBtn.addEventListener('click', () => {\n\n        if (fullscreenStatus === 'iconFullscreen') {\n\n          oldCodeMaxHeight = hljs.style.maxHeight;\n\n          requestFullScreen(code);\n\n          fullscreenStatus = 'iconFullscreenExit';\n\n          fullscreenAriaLabel = '退出全屏';\n\n          hljs.style.maxHeight = 'calc(100vh - 58px)';\n\n          expandBtn.style.display = 'none';\n\n          if (scrollbarContainer) scrollbarContainer.classList.add('f__hidden');\n\n        } else {\n\n          exitFullScreen(code);\n\n          fullscreenStatus = 'iconFullscreen';\n\n          fullscreenAriaLabel = '全屏';\n\n          if (oldCodeMaxHeight !== undefined) hljs.style.maxHeight = oldCodeMaxHeight;\n\n          expandBtn.style.display = '';\n\n          setTimeout(() => {\n\n            if (scrollbarContainer) scrollbarContainer.classList.add('f__hidden');\n\n          }, 300);\n\n        }\n\n        const useEl = fullscreenBtn.querySelector('svg > use');\n\n        useEl.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', '#' + fullscreenStatus);\n\n        fullscreenBtn.setAttribute('aria-label', fullscreenAriaLabel);\n\n      });\n\n\n\n      // 添加模拟滚动条\n\n      if (!isEnableScrollbar) return;\n\n      if (code.querySelector('.scrollbar-container')) return;\n\n      const scrollbarHtml = `<div class=\"scrollbar-container protyle-custom\"><div class=\"scrollbar-thumb\"></div></div>`;\n\n      code.insertAdjacentHTML('beforeend', scrollbarHtml);\n\n      const scrollbarContainer = code.querySelector('.scrollbar-container');\n\n      const protyleContent = protyle.querySelector(\".protyle-content\");\n\n\n\n      // 检查是否需要显示模拟滚动条\n\n      function checkScrollbarVisibility() {\n\n        const hasHorizontalScrollbar = hljs.scrollWidth > hljs.clientWidth; // 是否有横向滚动条\n\n        const isHeightExceeded = hljs.scrollHeight > parseHeightToPixels(codeMaxHeight); // 高度是否超过codeMaxHeight\n\n        const isSticky = !isElementBottomInViewport(code); // 是否处于 sticky 状态\n\n\n\n        if (hasHorizontalScrollbar && isHeightExceeded && isSticky) {\n\n          scrollbarContainer.classList.remove('f__hidden'); // 显示模拟滚动条\n\n        } else {\n\n          scrollbarContainer.classList.add('f__hidden'); // 隐藏模拟滚动条\n\n        }\n\n      }\n\n\n\n      // 初始化滚动条状态\n\n      checkScrollbarVisibility();\n\n\n\n      // 监听 protyleContent 的滚动事件\n\n      protyleContent.addEventListener('scroll', () => {\n\n        checkScrollbarVisibility();\n\n      });\n\n\n\n      // 模拟滚动条滚动\n\n      const scrollbarThumb = code.querySelector(\".scrollbar-thumb\");\n\n      let isDragging = false; // 是否正在拖动\n\n      let startX, thumbStartX; // 鼠标按下时的初始位置\n\n\n\n      // 计算滑块宽度和滚动比例\n\n      function updateScrollbar() {\n\n        const contentWidth = hljs.scrollWidth;\n\n        const viewportWidth = hljs.clientWidth;\n\n        let thumbWidth = (viewportWidth / contentWidth) * scrollbarContainer.offsetWidth;\n\n        // 边界值处理\n\n        thumbWidth = Math.max(thumbWidth, 10); // 最小宽度为10px\n\n        scrollbarThumb.style.width = `${thumbWidth}px`;\n\n      }\n\n\n\n      // 同步滚动条位置\n\n      function syncScrollbarPosition() {\n\n        const scrollPercentage = hljs.scrollLeft / (hljs.scrollWidth - hljs.clientWidth);\n\n        const thumbMaxMove = scrollbarContainer.offsetWidth - scrollbarThumb.offsetWidth;\n\n        scrollbarThumb.style.left = `${scrollPercentage * thumbMaxMove}px`;\n\n      }\n\n\n\n      // 初始化滚动条\n\n      updateScrollbar();\n\n      syncScrollbarPosition();\n\n\n\n      // 监听 .code-block 的滚动事件\n\n      hljs.addEventListener(\"scroll\", () => {\n\n        syncScrollbarPosition();\n\n      });\n\n\n\n      // 模拟滚动条拖动逻辑\n\n      scrollbarThumb.addEventListener(\"mousedown\", (e) => {\n\n        isDragging = true;\n\n        startX = e.clientX;\n\n        thumbStartX = parseFloat(scrollbarThumb.style.left) || 0;\n\n        // 禁用文本选择\n\n        hljs.style.userSelect = \"none\";\n\n        // 绑定全局事件\n\n        document.addEventListener(\"mousemove\", handleMouseMove);\n\n        document.addEventListener(\"mouseup\", handleMouseUp);\n\n        // 阻止默认行为\n\n        e.preventDefault();\n\n      });\n\n\n\n      function handleMouseMove(e) {\n\n        if (!isDragging) return;\n\n        const deltaX = e.clientX - startX;\n\n        const thumbMaxMove = scrollbarContainer.offsetWidth - scrollbarThumb.offsetWidth;\n\n        let newThumbPosition = thumbStartX + deltaX;\n\n        // 限制滑块范围\n\n        newThumbPosition = Math.max(0, Math.min(newThumbPosition, thumbMaxMove));\n\n        scrollbarThumb.style.left = `${newThumbPosition}px`;\n\n        // 同步 .code-block 的滚动位置\n\n        const scrollPercentage = newThumbPosition / thumbMaxMove;\n\n        hljs.scrollLeft = scrollPercentage * (hljs.scrollWidth - hljs.clientWidth);\n\n        // 阻止默认行为\n\n        e.preventDefault();\n\n      }\n\n\n\n      function handleMouseUp() {\n\n        isDragging = false;\n\n        // 恢复文本选择\n\n        hljs.style.userSelect = \"\";\n\n        // 移除全局事件\n\n        document.removeEventListener(\"mousemove\", handleMouseMove);\n\n        document.removeEventListener(\"mouseup\", handleMouseUp);\n\n      }\n\n\n\n      // 监听窗口大小变化\n\n      window.addEventListener(\"resize\", () => {\n\n        checkScrollbarVisibility();\n\n        updateScrollbar();\n\n        syncScrollbarPosition();\n\n      });\n\n    });\n\n  }\n\n\n\n  function requestFullScreen(element) {\n\n    if (element.requestFullscreen) {\n\n      element.requestFullscreen();\n\n    } else if (element.mozRequestFullScreen) { // Firefox\n\n      element.mozRequestFullScreen();\n\n    } else if (element.webkitRequestFullscreen) { // Chrome, Safari, Opera\n\n      element.webkitRequestFullscreen();\n\n    } else if (element.msRequestFullscreen) { // IE/Edge\n\n      element.msRequestFullscreen();\n\n    }\n\n  }\n\n\n\n  function exitFullScreen() {\n\n    if (document.exitFullscreen) {\n\n      document.exitFullscreen();\n\n    } else if (document.mozCancelFullScreen) { // Firefox\n\n      document.mozCancelFullScreen();\n\n    } else if (document.webkitExitFullscreen) { // Chrome, Safari, Opera\n\n      document.webkitExitFullscreen();\n\n    } else if (document.msExitFullscreen) { // IE/Edge\n\n      document.msExitFullscreen();\n\n    }\n\n  }\n\n\n\n  function getAriaLabelText(expandStatus) {\n\n    return expandStatus === 'iconDown' ? '展开' : '折叠';\n\n  }\n\n\n\n  function getExpandStatus(hljs) {\n\n    return getComputedStyle(hljs, null)?.maxHeight === codeMaxHeight ? 'iconDown' : 'iconUp';\n\n  }\n\n\n\n  function addStyle(css) {\n\n    // 创建一个新的style元素\n\n    const style = document.createElement('style');\n\n    // 设置CSS规则\n\n    style.innerHTML = css;\n\n    // 将style元素添加到<head>中\n\n    document.head.appendChild(style);\n\n  }\n\n\n\n  function observeProtyleLoaded(el, callback) {\n\n    const config = { attributes: false, childList: true, subtree: true };\n\n    const observer = new MutationObserver((mutationsList, observer) => {\n\n      mutationsList.forEach(mutation => {\n\n        if (mutation.type === 'childList') {\n\n          // 查找新增加的 NodeCodeBlock 元素\n\n          const protyles = Array.from(mutation.addedNodes).filter(node =>\n\n            node.nodeType === Node.ELEMENT_NODE &&\n\n            (node.classList.contains('protyle') || node.classList.contains('protyle-content'))\n\n          );\n\n          // 如果找到了这样的元素，则调用回调函数\n\n          if (protyles.length > 0) {\n\n            callback(protyles);\n\n          }\n\n\n\n          // 监听代码块node被创建\n\n          const codeBlocks = Array.from(mutation.addedNodes).filter(node =>\n\n            node.nodeType === Node.ELEMENT_NODE &&\n\n            (node.matches('.code-block:not(:has(.protyle-icon--expand))'))\n\n          );\n\n          if (codeBlocks.length > 0) {\n\n            addCodeExtends(codeBlocks, codeBlocks[0].closest('.protyle'));\n\n          }\n\n        }\n\n      });\n\n    });\n\n    // 开始观察 body 下的所有变化\n\n    observer.observe(el, config);\n\n    // 当不再需要观察时可调用断开来停止观察\n\n    return () => {\n\n      observer.disconnect();\n\n    };\n\n  }\n\n\n\n  // 等待元素渲染完成后执行\n\n  function whenElementExist(selector, node) {\n\n    return new Promise(resolve => {\n\n      const check = () => {\n\n        const el = typeof selector === 'function' ? selector() : (node || document).querySelector(selector);\n\n        if (el) resolve(el); else requestAnimationFrame(check);\n\n      };\n\n      check();\n\n    });\n\n  }\n\n\n\n  function isMobile() {\n\n    return !!document.getElementById(\"sidebar\");\n\n  }\n\n\n\n  function isElementBottomInViewport(el) {\n\n    if (!el) return false; // 如果元素不存在，直接返回 false\n\n    const rect = el.getBoundingClientRect(); // 获取元素的边界信息\n\n    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n\n    // 判断元素的底部是否在视口内\n\n    return rect.bottom <= windowHeight;\n\n  }\n\n\n\n  // 通过字符串解析实际高度，缓存对象 (作为函数属性)\n\n  function parseHeightToPixels(value) {\n\n    // 静态缓存对象 (函数属性)\n\n    if (!parseHeightToPixels.memo) {\n\n      parseHeightToPixels.memo = {};\n\n    }\n\n\n\n    // 1. 数字类型直接返回\n\n    if (typeof value === 'number') {\n\n      return value;\n\n    }\n\n\n\n    // 2. 检查缓存\n\n    if (parseHeightToPixels.memo.hasOwnProperty(value)) {\n\n      return parseHeightToPixels.memo[value];\n\n    }\n\n\n\n    // 3. 处理 px 单位或纯数字字符串\n\n    if (typeof value === 'string') {\n\n      // 3.1 纯数字字符串 (如 '500')\n\n      if (/^\\d+\\.?\\d*$/.test(value)) {\n\n        const num = parseFloat(value);\n\n        parseHeightToPixels.memo[value] = num;\n\n        return num;\n\n      }\n\n\n\n      // 3.2 px 单位字符串 (如 '500px' 或 '300.5px')\n\n      if (value.toLowerCase().endsWith('px')) {\n\n        const num = parseFloat(value);\n\n        parseHeightToPixels.memo[value] = num;\n\n        return num;\n\n      }\n\n    }\n\n\n\n    // 4. 其他单位需要 DOM 计算\n\n    const tempDiv = document.createElement('div');\n\n    tempDiv.style.position = 'absolute';\n\n    tempDiv.style.visibility = 'hidden';\n\n    tempDiv.style.height = value;\n\n    tempDiv.style.left = '-9999px';\n\n\n\n    document.body.appendChild(tempDiv);\n\n    const heightInPixels = parseFloat(getComputedStyle(tempDiv).height);\n\n    document.body.removeChild(tempDiv);\n\n\n\n    // 存入缓存\n\n    parseHeightToPixels.memo[value] = heightInPixels;\n\n    return heightInPixels;\n\n  }\n\n\n\n  let statusMsg;\n\n  function showStatusMsg(params, append = false) {\n\n    if (!statusMsg) statusMsg = document.querySelector('#status .status__msg');\n\n    params = typeof params === 'string' ? params : JSON.stringify(params);\n\n    let html = statusMsg.innerHTML;\n\n    if (append) {\n\n      html += params;\n\n    } else {\n\n      html = params;\n\n    }\n\n    html = html.trim();\n\n    statusMsg.innerHTML = html;\n\n  }\n\n})();\n"
  },
  {
    "id": "20250416151107-0000036",
    "name": "-Middle-click_to-expand_file_tree",
    "type": "js",
    "enabled": true,
    "content": "/* 中键点击展开文档树 JS片段 */\n\n(async () => {\n\n  let g_reset = setInterval(main, 2000);\n\n\n\n  function main() {\n\n    if (document.querySelector('.sy__file')) {\n\n      clearInterval(g_reset);\n\n    } else {\n\n      return false;\n\n    }\n\n    document.querySelector('.sy__file').addEventListener('mousedown', event => {\n\n      if (event.button !== 1) return;\n\n      if (!event.target.classList.contains('b3-list-item__text'))\n\n        let target = event.target.parentNode;\n\n      let temp = event.target;\n\n      for (let i = 0; i < 4 && temp; i++) {\n\n        if (temp?.getAttribute(\"data-type\") === \"navigation-file\"\n\n          || temp?.getAttribute(\"data-type\") === \"navigation-root\") {\n\n          target = temp;\n\n          break;\n\n        }\n\n        temp = temp?.parentNode;\n\n      }\n\n      if (target?.getAttribute(\"data-type\") === \"navigation-file\"\n\n        || target?.getAttribute(\"data-type\") === \"navigation-root\") {\n\n        const b3ListItemToggle = target.querySelector('.b3-list-item__toggle');\n\n        const title = target.querySelector('.b3-list-item__text');\n\n        if (b3ListItemToggle.classList.contains('fn__hidden')) return;\n\n        event.preventDefault();\n\n        b3ListItemToggle.click();\n\n        if (event.ctrlKey) {\n\n          title.click();\n\n        }\n\n      }\n\n    }, true);\n\n  }\n\n})();\n"
  },
  {
    "id": "20250416151107-0000037",
    "name": "-slash_menu_arrow_keys_command",
    "type": "js",
    "enabled": true,
    "content": "/* from wilsons\n\n当开启筛选后, 为个人代码, 如果需要全部 wilsons 代码请关注\n\nhttps://ld246.com/article/1724305128590/comment/1724740441386#comments\n\n*/\n\n\n\n// see https://ld246.com/article/1723539516115\n\n(() => {\n\n\n\n  // 使用兼容模式，\n\n  // 如果左右箭头有问题，可以使用兼容模式，兼容模式用ctrl/cmd + 方向键移动\n\n  // 默认false，未开启，设为true开启\n\n  const useCompatibilityMode = false;\n\n\n\n  ////////////// 以下代码不涉及配置项，如无必要勿动 //////////////////////////\n\n  // 判断是否Asri主题\n\n  const theme = siyuan.config.appearance.mode === 0 ? siyuan.config.appearance.themeLight : siyuan.config.appearance.themeDark;\n\n  if (theme !== 'Asri') return;\n\n\n\n  // 设置下一个元素的焦点\n\n  function nextElementFocus(currentFocus, nextElement) {\n\n    currentFocus.classList.remove(\"b3-list-item--focus\");\n\n    nextElement?.classList.add(\"b3-list-item--focus\");\n\n  }\n\n\n\n\n\n  // 等待元素渲染完成后执行\n\n  function whenElementExist(selector) {\n\n    return new Promise(resolve => {\n\n      const checkForElement = () => {\n\n        let element;\n\n        if (typeof selector === 'function') {\n\n          element = selector();\n\n        } else {\n\n          element = document.querySelector(selector);\n\n        }\n\n        if (element) {\n\n          resolve(element);\n\n        } else {\n\n          requestAnimationFrame(checkForElement);\n\n        }\n\n      };\n\n      checkForElement();\n\n    });\n\n  }\n\n\n\n  function monitorHintMenu(layoutCenter) {\n\n    // 定义一个回调函数处理 DOM 变化\n\n    const observerCallback = (mutationsList) => {\n\n      mutationsList.forEach((mutation) => {\n\n        if (mutation.type === 'childList') {\n\n          // 当 layout__center 元素有新的子元素被添加或删除时触发\n\n          mutation.addedNodes.forEach((node) => {\n\n            if (node.classList && node.classList.contains('hint--menu')) {\n\n              // 检查新添加的节点是否是 .hint--menu\n\n              checkFnNoneClass(node);\n\n            }\n\n          });\n\n        } else if (mutation.type === 'attributes' && mutation.target.classList.contains('hint--menu')) {\n\n          // 当 .hint--menu 元素的属性发生变化时触发\n\n          checkFnNoneClass(mutation.target);\n\n        }\n\n      });\n\n    };\n\n\n\n    // 检查是否有 .fn_none 类\n\n    function checkFnNoneClass(node) {\n\n      const hasFnNoneClass = node.classList.contains('fn__none');\n\n      if (!hasFnNoneClass) {\n\n        // 显示menu\n\n        hintMenuShow = true;\n\n        if (hintMenuTimer) clearTimeout(hintMenuTimer);\n\n      } else {\n\n        // 隐藏menu\n\n        if (hintMenuTimer) clearTimeout(hintMenuTimer);\n\n        hintMenuTimer = setTimeout(() => {\n\n          hintMenuShow = false;\n\n        }, 100);\n\n      }\n\n    }\n\n\n\n    // 配置 MutationObserver\n\n    const config = {childList: true, subtree: true, attributes: true, attributeFilter: ['class']};\n\n\n\n    // 创建一个新的 MutationObserver 实例\n\n    const observer = new MutationObserver(observerCallback);\n\n\n\n    // 开始观察 layout__center 元素\n\n    observer.observe(layoutCenter, config);\n\n\n\n    // 返回一个函数以停止观察\n\n    return () => {\n\n      observer.disconnect();\n\n    };\n\n  }\n\n\n\n  // region group mode\n\n  // 获取下一个分组元素的焦点\n\n  function focusNextGroupButton() {\n\n    const menu = document.querySelector(\".hint--menu:not(.fn__none)\");\n\n    const currentFocus = menu.querySelector('.b3-list-item--focus');\n\n    let nextElement = currentFocus.nextElementSibling;\n\n\n\n    // 继续查找下一个元素，直到找到一个按钮或.b3-menu__separator\n\n    while (nextElement && nextElement.classList.contains('b3-list-item') && !nextElement.classList.contains('b3-menu__separator')) {\n\n      nextElement = nextElement.nextElementSibling;\n\n    }\n\n\n\n    // 如果找到了.b3-menu__separator，就聚焦到它的前一个按钮\n\n    if (nextElement && nextElement.classList.contains('b3-menu__separator')) {\n\n      nextElement = nextElement.nextElementSibling;\n\n    }\n\n\n\n    // 如果没有找到任何按钮或.b3-menu__separator，循环到列表开头\n\n    if (!nextElement || !nextElement.classList.contains('b3-list-item')) {\n\n      nextElement = menu.querySelector('.b3-list-item');\n\n    }\n\n\n\n    nextElementFocus(currentFocus, nextElement);\n\n  }\n\n\n\n  // 获取上一个分组元素的焦点\n\n  function focusPreviousGroupButton() {\n\n    const menu = document.querySelector(\".hint--menu:not(.fn__none)\");\n\n    const currentFocus = menu.querySelector('.b3-list-item--focus');\n\n    let previousElement = currentFocus.previousElementSibling;\n\n\n\n    // 继续查找上一个元素，直到找到一个按钮或.b3-menu__separator\n\n    while (previousElement && previousElement.classList.contains('b3-list-item') && !previousElement.classList.contains('b3-menu__separator')) {\n\n      previousElement = previousElement.previousElementSibling;\n\n    }\n\n\n\n    // 如果找到了.b3-menu__separator，就聚焦到它的前一个按钮\n\n    if (previousElement && previousElement.classList.contains('b3-menu__separator')) {\n\n      previousElement = previousElement.previousElementSibling;\n\n    }\n\n\n\n    // 如果没有找到任何按钮或.b3-menu__separator，循环到列表结尾\n\n    if (!previousElement || !previousElement.classList.contains('b3-list-item')) {\n\n      previousElement = menu.querySelector('.b3-list-item:last-child');\n\n    }\n\n\n\n    nextElementFocus(currentFocus, getGroupFirstElement(previousElement));\n\n  }\n\n\n\n  // 获取分组的第一个元素\n\n  function getGroupFirstElement(currentFocus) {\n\n    const menu = document.querySelector(\".hint--menu:not(.fn__none)\");\n\n    let previousElement = currentFocus.previousElementSibling;\n\n\n\n    // 继续查找上一个元素，直到找到一个按钮或.b3-menu__separator\n\n    while (previousElement && previousElement.classList.contains('b3-list-item') && !previousElement.classList.contains('b3-menu__separator')) {\n\n      previousElement = previousElement.previousElementSibling;\n\n    }\n\n\n\n    // 如果找到了.b3-menu__separator，就聚焦到它的前一个按钮\n\n    if (previousElement && previousElement.classList.contains('b3-menu__separator')) {\n\n      previousElement = previousElement.nextElementSibling;\n\n    }\n\n\n\n    // 如果没有找到任何按钮或.b3-menu__separator，循环到列表结尾\n\n    if (!previousElement || !previousElement.classList.contains('b3-list-item')) {\n\n      previousElement = menu.querySelector('.b3-list-item');\n\n    }\n\n    return previousElement;\n\n  }\n\n\n\n  // endregion group mode\n\n\n\n  // region search mode\n\n  function GetColData() {\n\n    const menu = document.querySelector(\".hint--menu:not(.fn__none)\");\n\n    const currentFocus = menu.querySelector('.b3-list-item--focus');\n\n    const parent = currentFocus.parentNode;\n\n    const b3ItemStyle = window.getComputedStyle(document.querySelector(\".hint--menu .b3-list-item\"))\n\n    const lineHeight = +b3ItemStyle.lineHeight.slice(0, -2)\n\n    const marginBottom = +b3ItemStyle.marginBottom.slice(0, -2)\n\n    // 每个组有groupSize个元素\n\n    const groupSize = Math.floor(menu.offsetHeight / (lineHeight + marginBottom))\n\n\n\n    // 计算当前聚焦元素在其父元素中的索引\n\n    const currentFocusIndex = Array.prototype.indexOf.call(parent.children, currentFocus);\n\n    const totalGroup = Math.ceil(parent.children.length / groupSize);\n\n    const curGroup = Math.ceil((currentFocusIndex + 1) / groupSize);\n\n    let rowNum = (currentFocusIndex + 1) % groupSize;\n\n    if (rowNum === 0) {\n\n      rowNum = groupSize;\n\n    }\n\n    return {\n\n      parent: parent, rowNum: rowNum, groupSize: groupSize, curGroup: curGroup,\n\n      totalGroup: totalGroup, currentFocusIndex: currentFocusIndex, currentFocus: currentFocus\n\n    }\n\n  }\n\n\n\n  function moveFocusByCol(isToRight) {\n\n    const data = GetColData();\n\n    const menuParent = data.parent;\n\n    let newFocusIndex;\n\n    if (data.curGroup === 1 && !isToRight) {\n\n      newFocusIndex = SkipMenuToEnd(data, menuParent);\n\n    } else if (data.curGroup === data.totalGroup && isToRight) {\n\n      newFocusIndex = data.rowNum - 1;\n\n    } else if (data.curGroup === data.totalGroup - 1 && isToRight) {\n\n      newFocusIndex = SkipMenuToEnd(data, menuParent);\n\n    } else {\n\n      newFocusIndex = data.currentFocusIndex + (isToRight ? data.groupSize : -data.groupSize);\n\n    }\n\n    nextElementFocus(data.currentFocus, menuParent.children[newFocusIndex]);\n\n  }\n\n\n\n  function SkipMenuToEnd(data, menuParent) {\n\n    let lastGroupButtonNum = menuParent.children.length % data.groupSize;\n\n    if (lastGroupButtonNum === 0) {\n\n      lastGroupButtonNum = data.groupSize;\n\n    }\n\n    if (data.rowNum <= lastGroupButtonNum) {\n\n      return menuParent.children.length + data.rowNum - lastGroupButtonNum - 1;\n\n    } else {\n\n      return menuParent.children.length - 1;\n\n    }\n\n  }\n\n\n\n  // endregion search mode\n\n\n\n  // region key monitor\n\n  function AddKeyEventListener() {\n\n    document.addEventListener('keydown', function (event) {\n\n      let menu;\n\n      if (useCompatibilityMode) {\n\n        if (!(event.ctrlKey || event.metaKey)) return\n\n        menu = document.querySelector(\".hint--menu:not(.fn__none)\");\n\n      } else {\n\n        if (!hintMenuShow) return;\n\n        menu = document.querySelector(\".hint--menu\");\n\n        menu.classList.remove(\"fn__none\");\n\n      }\n\n\n\n\n\n      if (menu) Do(menu, event,)\n\n    });\n\n  }\n\n\n\n  function Do(menu, event) {\n\n    const sepEl = document.querySelector(\"div.b3-menu__separator\");\n\n    if (event.key === 'ArrowLeft' || (event.shiftKey && event.key === \"Tab\"))\n\n      sepEl ? focusPreviousGroupButton() : moveFocusByCol(false);\n\n    else if (event.key === \"ArrowRight\" || event.key === \"Tab\")\n\n      sepEl ? focusNextGroupButton() : moveFocusByCol(true);\n\n    else if (event.key === 'Escape')\n\n      menu.classList.add(\"fn__none\");\n\n    else return;\n\n    event.preventDefault();\n\n    event.stopPropagation();\n\n  }\n\n\n\n  // endregion key monitor\n\n\n\n  // region Main\n\n  let hintMenuShow = false;\n\n  let hintMenuTimer = null;\n\n\n\n  // 监控menu显示状态\n\n  if (!useCompatibilityMode) {\n\n    whenElementExist('.layout__center').then(async element => {\n\n      monitorHintMenu(element); // 等待标签页容器渲染完成后开始监听\n\n    });\n\n  }\n\n  // 监听按键\n\n  AddKeyEventListener()\n\n  // endregion Main\n\n})();\n"
  }
]